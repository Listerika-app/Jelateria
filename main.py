import os
import logging
from aiogram import Bot, Dispatcher, types, executor
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

async def classify_toy(photo_bytes_b64):
    response = openai.ChatCompletion.create(
        model="gpt-4-vision-preview",
        messages=[
            {"role": "user", "content": "–û–ø—Ä–µ–¥–µ–ª–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –∫—É–∫–ª–∞, –º–∞—à–∏–Ω–∫–∞ –∏–ª–∏ –º—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞."},
            {"role": "user", "content": photo_bytes_b64}
        ],
        max_tokens=10
    )
    return response.choices[0].message["content"].strip().lower()

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    f = await bot.get_file(message.photo[-1].file_id)
    data = await bot.download_file(f.file_path)
    import base64
    b64 = base64.b64encode(data.read()).decode('utf-8')
    toy_type = await classify_toy(b64)

    if "–º—è–≥–∫–∞—è" in toy_type:
        text, buttons = "–ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–≤–ª—è—Ç—å –º—è–≥–∫—É—é –∏–≥—Ä—É—à–∫—É!", ["–¢–∞–Ω–µ—Ü", "–ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏"]
    elif "–∫—É–∫–ª–∞" in toy_type:
        text, buttons = "–ù–∞—á–∏–Ω–∞–µ–º –≤–æ–ª—à–µ–±—Å—Ç–≤–æ, –æ–∂–∏–≤–ª—è–µ–º –∫—É–∫–ª—É!", ["–ü—Ä–∏–≤–µ—Ç", "–ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏"]
    elif "–º–∞—à–∏–Ω–∫–∞" in toy_type:
        text, buttons = "–ù—É —á—Ç–æ, –∑–∞–≤–æ–¥–∏–º –º–æ—Ç–æ—Ä –∏ –ø–æ–µ—Ö–∞–ª–∏?", ["–ï–¥–µ–º", "–î—Ä–∏—Ñ—Ç"]
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–≥—Ä—É—à–∫—É üò¢")
        return

    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(*[types.InlineKeyboardButton(text=b, callback_data=b) for b in buttons])
    await message.reply(text, reply_markup=kb)

@dp.callback_query_handler()
async def process_cb(cq: types.CallbackQuery):
    action = cq.data
    await bot.send_message(cq.from_user.id, f"üé¨ –û–∂–∏–≤–ª—è–µ–º –∏–≥—Ä—É—à–∫—É... [{action}]")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
