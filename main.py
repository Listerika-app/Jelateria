import os
import logging
import base64
from aiogram import Bot, Dispatcher, types, executor
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_descriptions = {}

# GPT: –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∏–≥—Ä—É—à–∫—É –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
async def describe_toy(photo_bytes):
    b64 = base64.b64encode(photo_bytes).decode("utf-8")
    image_data = f"data:image/jpeg;base64,{b64}"

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": "–û–ø–∏—à–∏, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ. –ï—Å–ª–∏ —ç—Ç–æ –∏–≥—Ä—É—à–∫–∞, —É–∫–∞–∂–∏ –∫–∞–∫–∞—è –∏–º–µ–Ω–Ω–æ: –∫—É–∫–ª–∞, –º–∞—à–∏–Ω–∫–∞ –∏–ª–∏ –º—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞. –û–ø–∏—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ò—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω–æ-–¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."},
                    {"type": "image_url", "image_url": {"url": image_data}},
                ]
            }
        ],
        max_tokens=50
    )

    description = response.choices[0].message.content.strip()
    logging.info(f"[–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—É—à–∫–∏]: {description}")
    return description

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    file = await bot.get_file(message.photo[-1].file_id)
    photo = await bot.download_file(file.file_path)
    photo_bytes = photo.read()

    description = await describe_toy(photo_bytes)
    user_descriptions[user_id] = description  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ

    await message.reply(description)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏ –∫–Ω–æ–ø–æ–∫
    if "–º—è–≥–∫–∞—è" in description.lower():
        text, buttons = "–ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–≤–ª—è—Ç—å –º—è–≥–∫—É—é –∏–≥—Ä—É—à–∫—É!", ["–¢–∞–Ω–µ—Ü", "–ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏"]
    elif "–∫—É–∫–ª–∞" in description.lower():
        text, buttons = "–ù–∞—á–∏–Ω–∞–µ–º –≤–æ–ª—à–µ–±—Å—Ç–≤–æ, –æ–∂–∏–≤–ª—è–µ–º –∫—É–∫–ª—É!", ["–ü—Ä–∏–≤–µ—Ç", "–ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏"]
    elif "–º–∞—à–∏–Ω" in description.lower():
        text, buttons = "–ù—É —á—Ç–æ, –∑–∞–≤–æ–¥–∏–º –º–æ—Ç–æ—Ä –∏ –ø–æ–µ—Ö–∞–ª–∏?", ["–ï–¥–µ–º", "–î—Ä–∏—Ñ—Ç"]
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∏–≥—Ä—É—à–∫–∏ üò¢")
        return

    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(*[types.InlineKeyboardButton(text=b, callback_data=b) for b in buttons])
    await message.reply(text, reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler()
async def process_callback(callback_query: types.CallbackQuery):
    action = callback_query.data
    user_id = callback_query.from_user.id

    await bot.send_message(user_id, f"üé¨ –û–∂–∏–≤–ª—è–µ–º: {action}...")

    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—É—à–∫–∏
    description = user_descriptions.get(user_id, "–º—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∫–æ—Ç–∏–∫")
    # –í—ã–¥–µ–ª–∏–º –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    character = description.replace("–≠—Ç–æ", "").replace("–º—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞", "").strip().strip(".") or "–º—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
    if action == "–¢–∞–Ω–µ—Ü":
        prompt = f"{character} —Ç–∞–Ω—Ü—É–µ—Ç –≤ –º—É–ª—å—Ç—è—à–Ω–æ–º —Å—Ç–∏–ª–µ, —è—Ä–∫–∏–π —Ñ–æ–Ω, –¥–µ—Ç—Å–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞"
    elif action == "–ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏":
        prompt = f"{character} –ø–æ—Å—ã–ª–∞–µ—Ç –≤–æ–∑–¥—É—à–Ω—ã–π –ø–æ—Ü–µ–ª—É–π, —É–ª—ã–±–∞–µ—Ç—Å—è, –º—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å, —è—Ä–∫–∏–π —Ñ–æ–Ω"
    elif action == "–ü—Ä–∏–≤–µ—Ç":
        prompt = f"{character} —É–ª—ã–±–∞–µ—Ç—Å—è –∏ –º–∞—à–µ—Ç —Ä—É–∫–æ–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å—Ç–∏–ª—å"
    elif action == "–ï–¥–µ–º":
        prompt = f"{character} –µ–¥–µ—Ç –ø–æ –∏–≥—Ä—É—à–µ—á–Ω–æ–º—É –≥–æ—Ä–æ–¥—É, —Ä–∞–¥–æ—Å—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –º—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å"
    elif action == "–î—Ä–∏—Ñ—Ç":
        prompt = f"{character} –¥—Ä–∏—Ñ—Ç–∏—Ç —Å –¥—ã–º–æ–º –∏–∑-–ø–æ–¥ –∫–æ–ª—ë—Å, —Å—Ç–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ, –∫–∞–∫ –≤ –º—É–ª—å—Ç–∏–∫–µ"
    else:
        await bot.send_message(user_id, "–ü–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–∂–∏–≤–ª—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ üôà")
        return

    try:
        image = client.images.generate(
            model="dall-e-3",
            prompt=prompt,
            n=1,
            size="1024x1024",
            quality="standard"
        )
        image_url = image.data[0].url
        await bot.send_photo(user_id, image_url)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–∂–∏–≤–∏—Ç—å –∏–≥—Ä—É—à–∫—É üò¢")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
