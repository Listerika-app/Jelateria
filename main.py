import os
import logging
import base64
import requests
import time
from aiogram import Bot, Dispatcher, types, executor
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
RUNWAY_API_KEY = os.getenv("RUNWAY_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–º –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_descriptions = {}

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—É—à–∫–∏
async def describe_toy(photo_bytes):
    b64 = base64.b64encode(photo_bytes).decode("utf-8")
    image_data = f"data:image/jpeg;base64,{b64}"

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": "–û–ø–∏—à–∏, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ. –ï—Å–ª–∏ —ç—Ç–æ –∏–≥—Ä—É—à–∫–∞, —É–∫–∞–∂–∏ –∫–∞–∫–∞—è –∏–º–µ–Ω–Ω–æ: –∫—É–∫–ª–∞, –º–∞—à–∏–Ω–∫–∞ –∏–ª–∏ –º—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞. –û–ø–∏—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ò—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω–æ-–¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."},
                    {"type": "image_url", "image_url": {"url": image_data}},
                ]
            }
        ],
        max_tokens=50
    )

    description = response.choices[0].message.content.strip()
    logging.info(f"[–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—É—à–∫–∏]: {description}")
    return description

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    file = await bot.get_file(message.photo[-1].file_id)
    photo = await bot.download_file(file.file_path)
    photo_bytes = photo.read()

    description = await describe_toy(photo_bytes)
    user_descriptions[user_id] = description

    await message.reply(description)

    if "–º—è–≥–∫–∞—è" in description.lower():
        text, buttons = "–ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–≤–ª—è—Ç—å –º—è–≥–∫—É—é –∏–≥—Ä—É—à–∫—É!", ["–¢–∞–Ω–µ—Ü", "–ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏"]
    elif "–∫—É–∫–ª–∞" in description.lower():
        text, buttons = "–ù–∞—á–∏–Ω–∞–µ–º –≤–æ–ª—à–µ–±—Å—Ç–≤–æ, –æ–∂–∏–≤–ª—è–µ–º –∫—É–∫–ª—É!", ["–ü—Ä–∏–≤–µ—Ç", "–ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏"]
    elif "–º–∞—à–∏–Ω" in description.lower():
        text, buttons = "–ù—É —á—Ç–æ, –∑–∞–≤–æ–¥–∏–º –º–æ—Ç–æ—Ä –∏ –ø–æ–µ—Ö–∞–ª–∏?", ["–ï–¥–µ–º", "–î—Ä–∏—Ñ—Ç"]
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∏–≥—Ä—É—à–∫–∏ üò¢")
        return

    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(*[types.InlineKeyboardButton(text=b, callback_data=b) for b in buttons])
    await message.reply(text, reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ –≤–∏–¥–µ–æ Runway
@dp.callback_query_handler()
async def process_callback(callback_query: types.CallbackQuery):
    action = callback_query.data
    user_id = callback_query.from_user.id

    await bot.send_message(user_id, f"üé¨ –û–∂–∏–≤–ª—è–µ–º: {action}...")

    description = user_descriptions.get(user_id, "–º—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞")
    character = description.replace("–≠—Ç–æ", "").replace("–º—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞", "").strip(".").strip() or "–º—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞"
    style = "–≤ 3D —Å—Ç–∏–ª–µ, –∫–∞–∫ –≤ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞—Ö Disney, —è—Ä–∫–∏–π —Ñ–æ–Ω"

    if action == "–¢–∞–Ω–µ—Ü":
        prompt = f"{character} —Ç–∞–Ω—Ü—É–µ—Ç, {style}"
    elif action == "–ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏":
        prompt = f"{character} –ø–æ—Å—ã–ª–∞–µ—Ç –≤–æ–∑–¥—É—à–Ω—ã–π –ø–æ—Ü–µ–ª—É–π, —É–ª—ã–±–∞–µ—Ç—Å—è, {style}"
    elif action == "–ü—Ä–∏–≤–µ—Ç":
        prompt = f"{character} –º–∞—à–µ—Ç —Ä—É–∫–æ–π –∏ —É–ª—ã–±–∞–µ—Ç—Å—è, {style}"
    elif action == "–ï–¥–µ–º":
        prompt = f"{character} –µ–¥–µ—Ç –ø–æ –∏–≥—Ä—É—à–µ—á–Ω–æ–º—É –≥–æ—Ä–æ–¥—É, {style}"
    elif action == "–î—Ä–∏—Ñ—Ç":
        prompt = f"{character} –¥—Ä–∏—Ñ—Ç–∏—Ç —Å –¥—ã–º–æ–º –∏–∑-–ø–æ–¥ –∫–æ–ª—ë—Å, {style}"
    else:
        await bot.send_message(user_id, "–ü–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–∂–∏–≤–ª—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ üôà")
        return

    try:
        headers = {
            "Authorization": f"Bearer {RUNWAY_API_KEY}",
            "Content-Type": "application/json"
        }

        data = {
            "input": {
                "prompt": prompt,
                "num_frames": 80,
                "seed": 42
            }
        }

        response = requests.post(
            "https://api.runwayml.com/v1/generate/video/text-to-video",
            headers=headers,
            json=data
        )

        generation_id = response.json()["id"]
        video_url = None

        for _ in range(30):
            check = requests.get(
                f"https://api.runwayml.com/v1/generate/video/{generation_id}",
                headers=headers
            )
            status = check.json()
            if status.get("status") == "succeeded":
                video_url = status["video_url"]
                break
            time.sleep(5)

        if video_url:
            await bot.send_video(user_id, video_url)
        else:
            await bot.send_message(user_id, "‚è≥ –í–∏–¥–µ–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Runway: {e}")
        await bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
