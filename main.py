import os
import logging
import base64
import requests
import time
from aiogram import Bot, Dispatcher, types, executor
from openai import OpenAI
from aiogram.types import ChatActions

BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
RUNWAY_API_KEY = os.getenv("RUNWAY_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

user_descriptions = {}
user_images = {}
user_actions = {}  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ

async def describe_toy(photo_bytes):
    b64 = base64.b64encode(photo_bytes).decode("utf-8")
    image_data = f"data:image/jpeg;base64,{b64}"

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": "–û–ø–∏—à–∏, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ. –ï—Å–ª–∏ —ç—Ç–æ –∏–≥—Ä—É—à–∫–∞, —É–∫–∞–∂–∏ –∫–∞–∫–∞—è –∏–º–µ–Ω–Ω–æ: –∫—É–∫–ª–∞, –º–∞—à–∏–Ω–∫–∞ –∏–ª–∏ –º—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞. –û–ø–∏—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ò—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω–æ-–¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."},
                    {"type": "image_url", "image_url": {"url": image_data}},
                ]
            }
        ],
        max_tokens=50
    )

    description = response.choices[0].message.content.strip()
    logging.info(f"[–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—É—à–∫–∏]: {description}")
    return description

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    file = await bot.get_file(message.photo[-1].file_id)
    photo = await bot.download_file(file.file_path)
    photo_bytes = photo.read()

    description = await describe_toy(photo_bytes)
    user_descriptions[user_id] = description

    image_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
    user_images[user_id] = image_url

    await message.reply(description)

    if "–º—è–≥–∫–∞—è" in description.lower():
        text, buttons = "–ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–≤–ª—è—Ç—å –º—è–≥–∫—É—é –∏–≥—Ä—É—à–∫—É!", ["–¢–∞–Ω–µ—Ü", "–ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏"]
    elif "–∫—É–∫–ª–∞" in description.lower():
        text, buttons = "–ù–∞—á–∏–Ω–∞–µ–º –≤–æ–ª—à–µ–±—Å—Ç–≤–æ, –æ–∂–∏–≤–ª—è–µ–º –∫—É–∫–ª—É!", ["–ü—Ä–∏–≤–µ—Ç", "–ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏"]
    elif "–º–∞—à–∏–Ω" in description.lower():
        text, buttons = "–ù—É —á—Ç–æ, –∑–∞–≤–æ–¥–∏–º –º–æ—Ç–æ—Ä –∏ –ø–æ–µ—Ö–∞–ª–∏?", ["–ï–¥–µ–º", "–î—Ä–∏—Ñ—Ç"]
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∏–≥—Ä—É—à–∫–∏ üò¢")
        return

    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(*[types.InlineKeyboardButton(text=b, callback_data=f"action:{b}") for b in buttons])
    await message.reply(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("action:"))
async def handle_action(callback_query: types.CallbackQuery):
    action = callback_query.data.split(":")[1]
    user_id = callback_query.from_user.id
    user_actions[user_id] = action

    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton(text="üé¨ –ú—É–ª—å—Ç—Ñ–∏–ª—å–º", callback_data="style:3d"),
        types.InlineKeyboardButton(text="üìö –ö–æ–º–∏–∫—Å", callback_data="style:2d")
    )
    await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –≤–∏–¥–µ–æ:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("style:"))
async def generate_video(callback_query: types.CallbackQuery):
    style_choice = callback_query.data.split(":")[1]
    user_id = callback_query.from_user.id

    action = user_actions.get(user_id, "—Ç–∞–Ω—Ü—É–µ—Ç")
    description = user_descriptions.get(user_id, "–º—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞")
    image_url = user_images.get(user_id)

    character = description.replace("–≠—Ç–æ", "").replace("–º—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞", "").strip(".").strip() or "–º—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞"

    if style_choice == "3d":
        style = "–≤ 3D —Å—Ç–∏–ª–µ, –∫–∞–∫ –≤ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞—Ö Disney, —è—Ä–∫–∏–π —Ñ–æ–Ω"
    else:
        style = "–≤ 2D —Å—Ç–∏–ª–µ, –∫–∞–∫ –≤ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞—Ö Disney, —è—Ä–∫–∏–π —Ñ–æ–Ω"

    prompt = f"–¢–∞ –∂–µ –∏–≥—Ä—É—à–∫–∞ {action.lower()}, {style}"

    await bot.send_chat_action(user_id, ChatActions.UPLOAD_VIDEO)
    await bot.send_message(user_id, f"üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –≤ —Å—Ç–∏–ª–µ: {action} + {style.split(',')[0]}...")

    try:
        headers = {
            "Authorization": f"Bearer {RUNWAY_API_KEY}",
            "Content-Type": "application/json",
            "Accept": "application/json",
            "Runway-Version": "2024-01-01"
        }

        data = {
            "input": {
                "image_url": image_url,
                "prompt": prompt,
                "motion": "default",
                "num_frames": 80,
                "seed": 42
            }
        }

        response = requests.post(
            "https://api.runwayml.com/v2/generations",
            headers=headers,
            json=data
        )

        if response.status_code != 200 or "id" not in response.json():
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Runway: {response.text}")
            await bot.send_message(user_id, "‚ùå Runway –Ω–µ –ø—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return

        generation_id = response.json()["id"]
        video_url = None

        wait_message = await bot.send_message(user_id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ")
        progress = ["‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ.", "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ..", "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ..."]

        for i in range(30):
            check = requests.get(
                f"https://api.runwayml.com/v2/generations/{generation_id}",
                headers=headers
            )
            status = check.json()
            if status.get("status") == "succeeded":
                video_url = status.get("output", {}).get("video")
                break
            dots = progress[i % 3]
            await bot.edit_message_text(chat_id=user_id, message_id=wait_message.message_id, text=dots)
            time.sleep(5)

        await bot.delete_message(chat_id=user_id, message_id=wait_message.message_id)

        if video_url:
            await bot.send_message(user_id, "üéâ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!")
            await bot.send_video(user_id, video_url)
        else:
            await bot.send_message(user_id, "‚è≥ –í–∏–¥–µ–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Runway: {e}")
        await bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
