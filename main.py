import os
import logging
import base64
from aiogram import Bot, Dispatcher, types, executor
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–≥—Ä—É—à–∫–∏ –ø–æ —Ñ–æ—Ç–æ
async def classify_toy(photo_bytes):
    b64 = base64.b64encode(photo_bytes).decode("utf-8")
    image_data = f"data:image/jpeg;base64,{b64}"

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": "–û–ø—Ä–µ–¥–µ–ª–∏, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ. –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –∫—É–∫–ª–∞, –º–∞—à–∏–Ω–∫–∞ –∏–ª–∏ –º—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞."},
                    {"type": "image_url", "image_url": {"url": image_data}},
                ]
            }
        ],
        max_tokens=10
    )

    result = response.choices[0].message.content.strip().lower()
    logging.info(f"[GPT –æ–ø—Ä–µ–¥–µ–ª–∏–ª]: {result}")
    return result

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    file = await bot.get_file(message.photo[-1].file_id)
    photo = await bot.download_file(file.file_path)
    photo_bytes = photo.read()

    toy_type = await classify_toy(photo_bytes)

    if "–º—è–≥–∫–∞—è" in toy_type:
        text, buttons = "–ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–≤–ª—è—Ç—å –º—è–≥–∫—É—é –∏–≥—Ä—É—à–∫—É!", ["–¢–∞–Ω–µ—Ü", "–ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏"]
    elif "–∫—É–∫–ª–∞" in toy_type:
        text, buttons = "–ù–∞—á–∏–Ω–∞–µ–º –≤–æ–ª—à–µ–±—Å—Ç–≤–æ, –æ–∂–∏–≤–ª—è–µ–º –∫—É–∫–ª—É!", ["–ü—Ä–∏–≤–µ—Ç", "–ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏"]
    elif "–º–∞—à–∏–Ω–∫–∞" in toy_type:
        text, buttons = "–ù—É —á—Ç–æ, –∑–∞–≤–æ–¥–∏–º –º–æ—Ç–æ—Ä –∏ –ø–æ–µ—Ö–∞–ª–∏?", ["–ï–¥–µ–º", "–î—Ä–∏—Ñ—Ç"]
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–≥—Ä—É—à–∫—É üò¢")
        return

    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(*[types.InlineKeyboardButton(text=b, callback_data=b) for b in buttons])
    await message.reply(text, reply_markup=kb)

# –û–∂–∏–≤–ª–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ
@dp.callback_query_handler()
async def process_callback(callback_query: types.CallbackQuery):
    action = callback_query.data
    user_id = callback_query.from_user.id

    await bot.send_message(user_id, f"üé¨ –û–∂–∏–≤–ª—è–µ–º: {action}...")

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –º—è–≥–∫–æ–π –∏–≥—Ä—É—à–∫–∏
    if action == "–¢–∞–Ω–µ—Ü":
        prompt = "–ú—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞ —Ç–∞–Ω—Ü—É–µ—Ç —Å —Ä–∞–¥–æ—Å—Ç—å—é, –º—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å, —è—Ä–∫–∏–π —Ñ–æ–Ω, –¥–µ—Ç—Å–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞"
    elif action == "–ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏":
        prompt = "–ú—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞ –ø–æ—Å—ã–ª–∞–µ—Ç –≤–æ–∑–¥—É—à–Ω—ã–π –ø–æ—Ü–µ–ª—É–π, —É–ª—ã–±–∞–µ—Ç—Å—è, –º–∏–ª—ã–π –º—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å, —è—Ä–∫–∏–π —Ñ–æ–Ω"
    elif action == "–ü—Ä–∏–≤–µ—Ç":
        prompt = "–ö—É–∫–ª–∞ —É–ª—ã–±–∞–µ—Ç—Å—è –∏ –º–∞—à–µ—Ç —Ä—É–∫–æ–π, –º—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å"
    elif action == "–ï–¥–µ–º":
        prompt = "–ò–≥—Ä—É—à–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∫–∞ –µ–¥–µ—Ç –ø–æ –∏–≥—Ä—É—à–µ—á–Ω–æ–º—É –≥–æ—Ä–æ–¥—É, –º—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å"
    elif action == "–î—Ä–∏—Ñ—Ç":
        prompt = "–ò–≥—Ä—É—à–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∫–∞ –¥—Ä–∏—Ñ—Ç–∏—Ç —Å –¥—ã–º–æ–º –∏–∑-–ø–æ–¥ –∫–æ–ª—ë—Å, –≤–µ—Å—ë–ª—ã–π —Å—Ç–∏–ª—å"
    else:
        await bot.send_message(user_id, "–ü–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–∂–∏–≤–ª—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ üôà")
        return

    try:
        image = client.images.generate(
            model="dall-e-3",
            prompt=prompt,
            n=1,
            size="1024x1024",
            quality="standard"
        )
        image_url = image.data[0].url
        await bot.send_photo(user_id, image_url)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–∂–∏–≤–∏—Ç—å –∏–≥—Ä—É—à–∫—É üò¢")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
