import os
import logging
import openai
import base64
from aiogram import Bot, Dispatcher, types, executor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

async def classify_toy(photo_bytes):
    b64 = base64.b64encode(photo_bytes).decode('utf-8')
    image_data = f"data:image/jpeg;base64,{b64}"

    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ? –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –∫—É–∫–ª–∞, –º–∞—à–∏–Ω–∫–∞ –∏–ª–∏ –º—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞."},
                    {"type": "image_url", "image_url": {"url": image_data}},
                ]
            }
        ],
        max_tokens=10
    )

    result = response.choices[0].message["content"].strip().lower()
    logging.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {result}")
    return result

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    file = await bot.get_file(message.photo[-1].file_id)
    photo = await bot.download_file(file.file_path)
    photo_bytes = photo.read()

    toy_type = await classify_toy(photo_bytes)

    if "–º—è–≥–∫–∞—è" in toy_type:
        text = "–ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–≤–ª—è—Ç—å –º—è–≥–∫—É—é –∏–≥—Ä—É—à–∫—É!"
        buttons = ["–¢–∞–Ω–µ—Ü", "–ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏"]
    elif "–∫—É–∫–ª–∞" in toy_type:
        text = "–ù–∞—á–∏–Ω–∞–µ–º –≤–æ–ª—à–µ–±—Å—Ç–≤–æ, –æ–∂–∏–≤–ª—è–µ–º –∫—É–∫–ª—É!"
        buttons = ["–ü—Ä–∏–≤–µ—Ç", "–ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏"]
    elif "–º–∞—à–∏–Ω–∫–∞" in toy_type:
        text = "–ù—É —á—Ç–æ, –∑–∞–≤–æ–¥–∏–º –º–æ—Ç–æ—Ä –∏ –ø–æ–µ—Ö–∞–ª–∏?"
        buttons = ["–ï–¥–µ–º", "–î—Ä–∏—Ñ—Ç"]
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–≥—Ä—É—à–∫—É üò¢")
        return

    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(*[types.InlineKeyboardButton(text=b, callback_data=b) for b in buttons])
    await message.reply(text, reply_markup=kb)

@dp.callback_query_handler()
async def process_callback(callback_query: types.CallbackQuery):
    action = callback_query.data
    await bot.send_message(callback_query.from_user.id, f"üé¨ –û–∂–∏–≤–ª—è–µ–º –∏–≥—Ä—É—à–∫—É... [{action}]")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
